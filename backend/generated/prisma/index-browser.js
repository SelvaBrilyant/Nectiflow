
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  role: 'role',
  permissionId: 'permissionId'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissionId: 'permissionId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  type: 'type',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isVerified: 'isVerified',
  isBanned: 'isBanned',
  banReason: 'banReason',
  twoFAEnabled: 'twoFAEnabled',
  logo: 'logo',
  banner: 'banner',
  companyName: 'companyName',
  aboutUs: 'aboutUs',
  organisationType: 'organisationType',
  industryType: 'industryType',
  teamSize: 'teamSize',
  yearEstablished: 'yearEstablished',
  websiteUrl: 'websiteUrl',
  companyVision: 'companyVision',
  companySocials: 'companySocials',
  locationLink: 'locationLink',
  phone: 'phone',
  name: 'name',
  username: 'username',
  bio: 'bio',
  skills: 'skills',
  languages: 'languages',
  education: 'education',
  experience: 'experience',
  personalWebsite: 'personalWebsite',
  resumeLinks: 'resumeLinks',
  nationality: 'nationality',
  dob: 'dob',
  gender: 'gender',
  maritalStatus: 'maritalStatus',
  freelancerSocials: 'freelancerSocials',
  freelancerPhone: 'freelancerPhone',
  level: 'level',
  xp: 'xp',
  badges: 'badges',
  wallet: 'wallet',
  stripeAccountId: 'stripeAccountId'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  subcategory: 'subcategory',
  budget: 'budget',
  skills: 'skills',
  attachments: 'attachments',
  status: 'status',
  deliveryDays: 'deliveryDays',
  clientId: 'clientId',
  aiSummary: 'aiSummary',
  jobFeePaid: 'jobFeePaid',
  featured: 'featured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hiredFreelancerId: 'hiredFreelancerId'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  freelancerId: 'freelancerId',
  jobId: 'jobId',
  proposalText: 'proposalText',
  price: 'price',
  deliveryDays: 'deliveryDays',
  attachments: 'attachments',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  title: 'title',
  amount: 'amount',
  description: 'description',
  isPaid: 'isPaid',
  isApproved: 'isApproved',
  dueDate: 'dueDate',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  referenceId: 'referenceId',
  stripePaymentIntent: 'stripePaymentIntent',
  stripeStatus: 'stripeStatus',
  stripeClientSecret: 'stripeClientSecret',
  platformFee: 'platformFee',
  netAmount: 'netAmount',
  createdAt: 'createdAt'
};

exports.Prisma.WithdrawalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  status: 'status',
  method: 'method',
  requestedAt: 'requestedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  reviewerId: 'reviewerId',
  revieweeId: 'revieweeId',
  jobId: 'jobId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  jobId: 'jobId',
  content: 'content',
  attachments: 'attachments',
  timestamp: 'timestamp'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.AdminLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  adminId: 'adminId',
  details: 'details',
  timestamp: 'timestamp',
  userId: 'userId'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  filedById: 'filedById',
  againstUserId: 'againstUserId',
  reason: 'reason',
  status: 'status',
  resolution: 'resolution',
  filedAt: 'filedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  FREELANCER: 'FREELANCER',
  CLIENT: 'CLIENT',
  ADMIN: 'ADMIN'
};

exports.PermissionName = exports.$Enums.PermissionName = {
  VIEW_DASHBOARD: 'VIEW_DASHBOARD',
  UPDATE_PROFILE: 'UPDATE_PROFILE',
  VIEW_NOTIFICATIONS: 'VIEW_NOTIFICATIONS',
  VIEW_WALLET: 'VIEW_WALLET',
  POST_JOB: 'POST_JOB',
  EDIT_JOB: 'EDIT_JOB',
  DELETE_JOB: 'DELETE_JOB',
  VIEW_PROPOSALS: 'VIEW_PROPOSALS',
  HIRE_FREELANCER: 'HIRE_FREELANCER',
  FUND_MILESTONE: 'FUND_MILESTONE',
  RELEASE_PAYMENT: 'RELEASE_PAYMENT',
  REVIEW_FREELANCER: 'REVIEW_FREELANCER',
  BROWSE_JOBS: 'BROWSE_JOBS',
  SUBMIT_PROPOSAL: 'SUBMIT_PROPOSAL',
  WITHDRAW_PROPOSAL: 'WITHDRAW_PROPOSAL',
  CHAT_WITH_CLIENT: 'CHAT_WITH_CLIENT',
  DELIVER_MILESTONE: 'DELIVER_MILESTONE',
  REQUEST_REVISION: 'REQUEST_REVISION',
  REVIEW_CLIENT: 'REVIEW_CLIENT',
  WITHDRAW_FUNDS: 'WITHDRAW_FUNDS',
  ACCESS_ADMIN_PANEL: 'ACCESS_ADMIN_PANEL',
  VIEW_ALL_USERS: 'VIEW_ALL_USERS',
  BAN_USER: 'BAN_USER',
  UNBAN_USER: 'UNBAN_USER',
  VERIFY_USER: 'VERIFY_USER',
  MANAGE_JOBS: 'MANAGE_JOBS',
  VIEW_TRANSACTIONS: 'VIEW_TRANSACTIONS',
  MANAGE_COMMISSION: 'MANAGE_COMMISSION',
  MANAGE_DISPUTES: 'MANAGE_DISPUTES',
  APPROVE_REVIEW: 'APPROVE_REVIEW',
  DELETE_REVIEW: 'DELETE_REVIEW',
  VIEW_SITE_STATS: 'VIEW_SITE_STATS',
  USE_AI_ASSISTANT: 'USE_AI_ASSISTANT',
  GENERATE_PROPOSALS: 'GENERATE_PROPOSALS',
  SUMMARIZE_JOB_DESCRIPTION: 'SUMMARIZE_JOB_DESCRIPTION',
  SUGGEST_RATE: 'SUGGEST_RATE',
  CREATE_DISPUTE: 'CREATE_DISPUTE',
  VIEW_DISPUTE: 'VIEW_DISPUTE',
  RESOLVE_DISPUTE: 'RESOLVE_DISPUTE',
  VIEW_LEADERBOARD: 'VIEW_LEADERBOARD',
  EARN_BADGES: 'EARN_BADGES',
  LEVEL_UP: 'LEVEL_UP'
};

exports.UserType = exports.$Enums.UserType = {
  ADMIN: 'ADMIN',
  COMPANY: 'COMPANY',
  FREELANCER: 'FREELANCER'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  DISPUTED: 'DISPUTED'
};

exports.ProposalStatus = exports.$Enums.ProposalStatus = {
  SENT: 'SENT',
  VIEWED: 'VIEWED',
  SHORTLISTED: 'SHORTLISTED',
  HIRED: 'HIRED',
  DECLINED: 'DECLINED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  JOB_POSTING: 'JOB_POSTING',
  MILESTONE_PAYMENT: 'MILESTONE_PAYMENT',
  PLATFORM_FEE: 'PLATFORM_FEE',
  WITHDRAWAL: 'WITHDRAWAL',
  REFUND: 'REFUND'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  JOB_UPDATE: 'JOB_UPDATE',
  NEW_PROPOSAL: 'NEW_PROPOSAL',
  MESSAGE: 'MESSAGE',
  PAYMENT: 'PAYMENT',
  REVIEW: 'REVIEW',
  SYSTEM: 'SYSTEM',
  DISPUTE: 'DISPUTE'
};

exports.Prisma.ModelName = {
  RolePermission: 'RolePermission',
  Permission: 'Permission',
  UserPermission: 'UserPermission',
  User: 'User',
  Job: 'Job',
  Proposal: 'Proposal',
  Milestone: 'Milestone',
  Transaction: 'Transaction',
  Withdrawal: 'Withdrawal',
  Review: 'Review',
  Message: 'Message',
  Notification: 'Notification',
  AdminLog: 'AdminLog',
  Dispute: 'Dispute',
  Badge: 'Badge'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
