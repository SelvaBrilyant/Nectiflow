generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  OWNER
  PROJECT_MANAGER
  TEAM_LEAD
  SENIOR_EMPLOYEE
  EMPLOYEE
  INTERN
  VISITOR
}

enum SubscriptionPlan {
  WORKER_BEE
  HONEY_COMB
  QUEEN_HIVE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  REVIEW
  COMPLETED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PermissionName {
  MANAGE_ORG
  MANAGE_SUBSCRIPTION
  VIEW_BILLING

  INVITE_USERS
  VIEW_ALL_USERS
  BAN_USER
  ASSIGN_ROLE

  CREATE_PROJECT
  UPDATE_PROJECT
  DELETE_PROJECT
  ASSIGN_PROJECT_MANAGER
  VIEW_ALL_PROJECTS

  CREATE_TASK
  ASSIGN_TASK
  UPDATE_TASK
  DELETE_TASK
  COMMENT_TASK
  VIEW_PRIVATE_TASKS
  CHANGE_TASK_STATUS

  CREATE_SUBTASK
  MARK_SUBTASK_DONE

  USE_AI_ASSIGNMENT
  VIEW_AI_LOG

  LOG_TIME
  VIEW_TIME_REPORT

  CREATE_BADGE
  ASSIGN_BADGE
  VIEW_BADGE_HISTORY

  VIEW_DASHBOARD
  UPDATE_PROFILE
  VIEW_NOTIFICATIONS
}

enum NotificationType {
  SYSTEM
  MENTION
  TASK
  COMMENT
}

model Organization {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  subdomain  String   @unique
  plan       SubscriptionPlan @default(WORKER_BEE)
  createdAt  DateTime @default(now())

  users      User[]
  projects   Project[]
  aiLogs     AiAssignmentLog[]
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  password       String?
  name           String
  role           Role
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isVerified     Boolean  @default(false)
  isBanned       Boolean  @default(false)

  resetPasswordOTP     String?
  resetPasswordExpiry  DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId

  department       String?
  skills           String[]
  skillRatings     Json?
  availability     String?
  workloadScore    Float?
  performanceScore Float?

  createdTasks    Task[]      @relation("CreatedTasks")
  assignedTasks   Task[]      @relation("AssignedTasks")
  comments        Comment[]
  attachments     Attachment[]
  timeLogs        TimeLog[]
  taskLogs        TaskActivityLog[]
  badges          Badge[]

  notifications   Notification[]
  activityLogs    ActivityLog[]
}

model RolePermission {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  role           Role         @unique
  permissionIds  String[]     @db.ObjectId
  permissions    Permission[] @relation("RolePermissions", fields: [permissionIds], references: [id])
}


model Permission {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              PermissionName   @unique
  description       String?
  createdAt         DateTime         @default(now())

  roles             RolePermission[] @relation("RolePermissions", fields: [rolePermissionIds], references: [id])
  rolePermissionIds String[]         @db.ObjectId
}

model Project {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  department     String?
  requiredSkills String[]
  estimatedHours Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId

  tasks          Task[]
  badgeTemplates BadgeTemplate[]
}

model Task {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  dueDate        DateTime?
  tags           String[]
  visibility     String?
  recurrence     Json?

  requiredSkills String[]
  estimatedHours Int?
  department     String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project        Project    @relation(fields: [projectId], references: [id])
  projectId      String     @db.ObjectId

  assignedTo     User?      @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId   String?    @db.ObjectId

  createdBy      User       @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById    String     @db.ObjectId

  subtasks       Subtask[]
  aiAssignment   AiAssignmentLog?
  comments       Comment[]
  attachments    Attachment[]
  timeLogs       TimeLog[]
  activityLogs   TaskActivityLog[]
  badges         Badge[]
}

model Subtask {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  isDone    Boolean  @default(false)

  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String   @db.ObjectId

  attachments Attachment[]
}

model Attachment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  fileName     String
  type         String
  taskId       String?  @db.ObjectId
  subtaskId    String?  @db.ObjectId
  uploadedById String   @db.ObjectId
  uploadedAt   DateTime @default(now())

  task         Task?    @relation(fields: [taskId], references: [id])
  subtask      Subtask? @relation(fields: [subtaskId], references: [id])
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  images    String[]
  createdAt DateTime @default(now())

  taskId    String   @db.ObjectId
  task      Task     @relation(fields: [taskId], references: [id])

  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  parentId  String?  @db.ObjectId
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")
}

model AiAssignmentLog {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId         String   @unique @db.ObjectId
  confidence     Float
  assignedToId   String?
  modelUsed      String
  promptSnapshot String
  outputReason   String?
  createdAt      DateTime @default(now())

  task           Task         @relation(fields: [taskId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
}

model TimeLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  taskId    String   @db.ObjectId
  hours     Float
  note      String?
  loggedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
}

model TaskActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String   @db.ObjectId
  action    String
  oldValue  Json?
  newValue  Json?
  actorId   String   @db.ObjectId
  actedAt   DateTime @default(now())

  task      Task     @relation(fields: [taskId], references: [id])
  actor     User     @relation(fields: [actorId], references: [id])
}

model BadgeTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  name        String
  icon        String
  description String
  criteria    String
  createdAt   DateTime @default(now())

  project     Project  @relation(fields: [projectId], references: [id])
  badges      Badge[]
}

model Badge {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  userId       String         @db.ObjectId
  templateId   String         @db.ObjectId
  assignedAt   DateTime       @default(now())
  taskId       String?        @db.ObjectId

  user         User           @relation(fields: [userId], references: [id])
  template     BadgeTemplate  @relation(fields: [templateId], references: [id])
  relatedTask  Task?          @relation(fields: [taskId], references: [id])
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user      User @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  action    String
  metadata  Json?
  timestamp DateTime @default(now())

  user      User @relation(fields: [userId], references: [id])
}
